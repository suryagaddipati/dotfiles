#!/bin/bash

# worktree-switch - Interactive FZF-based worktree switcher with preview

# Check if we're in a git repository
if ! git rev-parse --show-toplevel &>/dev/null; then
    echo "Error: Not in a git repository"
    exit 1
fi

# Check if fzf is available
if ! command -v fzf &>/dev/null; then
    echo "Error: fzf is not installed"
    exit 1
fi

# Get repository information
REPO_ROOT=$(git worktree list | head -1 | awk '{print $1}')
if [ -z "$REPO_ROOT" ]; then
    REPO_ROOT=$(git rev-parse --show-toplevel)
fi
REPO_NAME=$(basename "$REPO_ROOT")

# Function to get worktree info
get_worktree_info() {
    local path="$1"
    local branch="$2"
    local commit="$3"
    
    # Get worktree name
    if [ "$path" = "$REPO_ROOT" ]; then
        local name="master"
    else
        local name=$(basename "$path")
    fi
    
    # Check if currently in this worktree
    local current=""
    if [ "$(pwd)" = "$path" ]; then
        current=" [current]"
    fi
    
    # Format output
    printf "%-20s %-30s %s%s" "$name" "$branch" "${commit:0:8}" "$current"
}

# Function to generate preview for a worktree
generate_preview() {
    local worktree_path="$1"
    local branch_name="$2"
    
    echo "Worktree: $(basename "$worktree_path")"
    echo "Path: $worktree_path"
    echo "Branch: $branch_name"
    echo ""
    echo "Recent commits:"
    echo "─────────────────────────────────────────────"
    
    # Show recent commits
    cd "$worktree_path" 2>/dev/null && git log --oneline --graph --decorate -10 2>/dev/null
    
    echo ""
    echo "Status:"
    echo "─────────────────────────────────────────────"
    
    # Show git status
    cd "$worktree_path" 2>/dev/null && git status -s 2>/dev/null
    
    # Show modified files count
    local modified=$(cd "$worktree_path" 2>/dev/null && git status --porcelain | wc -l | tr -d ' ')
    if [ "$modified" -gt 0 ]; then
        echo ""
        echo "⚠ $modified file(s) with uncommitted changes"
    fi
}

# Collect worktree information
worktrees=()
while IFS= read -r line; do
    if [[ $line == worktree* ]]; then
        worktree_path=${line#worktree }
    elif [[ $line == branch* ]]; then
        branch_name=${line#branch refs/heads/}
    elif [[ $line == HEAD* ]]; then
        commit_hash=${line#HEAD }
        # We have all info for this worktree
        info=$(get_worktree_info "$worktree_path" "$branch_name" "$commit_hash")
        worktrees+=("$info|$worktree_path|$branch_name")
    fi
done < <(git worktree list --porcelain)

# Show FZF selector with preview
selected=$(printf '%s\n' "${worktrees[@]}" | cut -d'|' -f1 | \
    fzf --height=80% \
        --reverse \
        --header="Select worktree to switch to (ESC to cancel)" \
        --preview-window=right:60% \
        --preview="echo {} | awk '{print \$1}' | xargs -I% bash -c '
            for wt in \"${worktrees[@]}\"; do
                info=\$(echo \"\$wt\" | cut -d\"|\" -f1)
                path=\$(echo \"\$wt\" | cut -d\"|\" -f2)
                branch=\$(echo \"\$wt\" | cut -d\"|\" -f3)
                name=\$(echo \"\$info\" | awk \"{print \\\$1}\")
                if [ \"\$name\" = \"%\" ]; then
                    $(declare -f generate_preview)
                    generate_preview \"\$path\" \"\$branch\"
                    break
                fi
            done
        '" \
        --bind="ctrl-r:reload(git worktree list)" \
        --bind="ctrl-d:execute(echo {} | awk '{print \$1}' | xargs -I% bash -c 'source ~/code/dotfiles/tmux-worktree.bash && twd %')+reload(git worktree list)")

# Process selection
if [ -n "$selected" ]; then
    # Extract worktree name from selection
    worktree_name=$(echo "$selected" | awk '{print $1}')
    
    # Find the path for this worktree
    for wt in "${worktrees[@]}"; do
        info=$(echo "$wt" | cut -d"|" -f1)
        path=$(echo "$wt" | cut -d"|" -f2)
        name=$(echo "$info" | awk '{print $1}')
        
        if [ "$name" = "$worktree_name" ]; then
            # Change to the worktree directory
            cd "$path"
            
            # If in tmux, switch to or create window
            if [ -n "$TMUX" ]; then
                # Source tmux-worktree functions and switch
                source ~/code/dotfiles/tmux-worktree.bash
                tws "$worktree_name"
            else
                echo "Switched to worktree: $worktree_name"
                echo "Path: $path"
                echo "Run 'cd \"$path\"' to enter the worktree"
            fi
            break
        fi
    done
fi