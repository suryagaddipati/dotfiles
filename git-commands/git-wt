#!/bin/bash

# git-wt: Change to a git worktree directory

set -e

if [ $# -ne 1 ]; then
    echo "Usage: git wt <branch_name>"
    echo "Changes to the worktree directory for the specified branch"
    exit 1
fi

branch_name="$1"

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo "Error: Not in a git repository"
    exit 1
fi

# Get the repository root
repo_root=$(git rev-parse --show-toplevel)
worktree_path="$repo_root/.worktrees/$branch_name"

# Check if worktree exists
if [ ! -d "$worktree_path" ]; then
    echo "Error: Worktree .worktrees/$branch_name does not exist"
    echo ""
    echo "Available worktrees:"
    if [ -d "$repo_root/.worktrees" ]; then
        ls -1 "$repo_root/.worktrees" 2>/dev/null || echo "None"
    else
        echo "None"
    fi
    exit 1
fi

# Since git subcommands run in subshells and can't change the parent shell's directory,
# we output the cd command for the user to execute
echo "cd $worktree_path"

# Also provide a helpful message
echo "# Copy and paste the above command to change to the worktree directory" >&2