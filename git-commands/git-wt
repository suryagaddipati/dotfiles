#!/bin/bash

# git-worktree - Unified git worktree management
# Combines functionality of git-wtc, git-wt, and git-wtl

COMMAND=$1
BRANCH_NAME=$2

show_usage() {
    echo "Usage: git-wt <command> [branch]"
    echo "Commands:"
    echo "  create|cr <branch> - Create worktree for branch (new or existing)"
    echo "  change|c <branch>  - Change to existing worktree"
    echo "  delete|d <branch>  - Delete worktree, directory, and git branch"
    echo "  list|l             - List all worktrees"
    echo ""
    echo "Examples:"
    echo "  git-wt cr feature-branch    # Create worktree"
    echo "  git-wt c feature-branch     # Change to worktree"
    echo "  git-wt d feature-branch     # Delete worktree"
    echo "  git-wt l                    # List worktrees"
}

create_worktree() {
    local branch_name="$1"
    
    if [ -z "$branch_name" ]; then
        echo "Error: Branch name required for create command"
        show_usage
        return 1
    fi
    
    local repo_root=$(git rev-parse --show-toplevel)
    local worktree_path="$repo_root/.worktrees/$branch_name"
    
    mkdir -p "$repo_root/.worktrees"
    
    if git show-ref --verify --quiet "refs/heads/$branch_name"; then
        git worktree add "$worktree_path" "$branch_name"
    else
        git worktree add -b "$branch_name" "$worktree_path"
    fi
    
    echo "cd \"$worktree_path\""
}

change_to_worktree() {
    local branch_name="$1"
    
    if [ -z "$branch_name" ]; then
        echo "Error: Branch name required for change command"
        show_usage
        return 1
    fi
    
    local repo_root=$(git rev-parse --show-toplevel)
    local worktree_path="$repo_root/.worktrees/$branch_name"
    
    if [ ! -d "$worktree_path" ]; then
        echo "Error: Worktree .worktrees/$branch_name does not exist"
        echo "Available worktrees:"
        ls -1 "$repo_root/.worktrees" 2>/dev/null || echo "No worktrees found"
        return 1
    fi
    
    echo "cd \"$worktree_path\""
}

delete_worktree() {
    local branch_name="$1"
    
    if [ -z "$branch_name" ]; then
        echo "Error: Branch name required for delete command"
        show_usage
        return 1
    fi
    
    local repo_root=$(git rev-parse --show-toplevel)
    local worktree_path="$repo_root/.worktrees/$branch_name"
    
    if [ ! -d "$worktree_path" ]; then
        echo "Error: Worktree .worktrees/$branch_name does not exist"
        echo "Available worktrees:"
        ls -1 "$repo_root/.worktrees" 2>/dev/null || echo "No worktrees found"
        return 1
    fi
    
    echo "Removing worktree: $worktree_path"
    git worktree remove "$worktree_path"
    
    if [ $? -eq 0 ]; then
        echo "Worktree '$branch_name' successfully removed"
        
        # Also delete the git branch if it exists
        if git show-ref --verify --quiet "refs/heads/$branch_name"; then
            echo "Deleting branch: $branch_name"
            git branch -D "$branch_name" 2>/dev/null
            if [ $? -eq 0 ]; then
                echo "Branch '$branch_name' successfully deleted"
            else
                echo "Warning: Could not delete branch '$branch_name' (may have unmerged changes)"
            fi
        fi
    else
        echo "Error: Failed to remove worktree '$branch_name'"
        return 1
    fi
}

list_worktrees() {
    git worktree list --porcelain | while IFS= read -r line; do
        if [[ $line == worktree* ]]; then
            worktree_path=${line#worktree }
            worktree_name=$(basename "$worktree_path")
            printf "%-20s" "$worktree_name"
        elif [[ $line == branch* ]]; then
            branch_name=${line#branch refs/heads/}
            printf "%-20s" "($branch_name)"
        elif [[ $line == HEAD* ]]; then
            commit_hash=${line#HEAD }
            printf "%s" "${commit_hash:0:8}"
        elif [[ -z $line ]]; then
            echo
        fi
    done
}

case $COMMAND in
    "create"|"cr")
        create_worktree "$BRANCH_NAME"
        ;;
    "change"|"c"|"goto"|"cd")
        change_to_worktree "$BRANCH_NAME"
        ;;
    "delete"|"d"|"rm"|"remove")
        delete_worktree "$BRANCH_NAME"
        ;;
    "list"|"l"|"ls")
        list_worktrees
        ;;
    *)
        show_usage
        exit 1
        ;;
esac